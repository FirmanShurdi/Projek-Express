{"version":3,"sources":["objek.js"],"names":["express","require","router","Router","get","req","res","db","query","err","results","sql","console","error","status","send","kategoriList","render","page","parseInt","offset","tampilkanSemua","all","limit","countSql","whereClause","queryParams","kategoriNama","countResult","fullDataSql","total","Math","ceil","totalItems","dataSql","dataParams","concat","objekList","map","obj","id","carouselSql","carouselParams","placeholders","excludeIds","join","carouselItems","totalPages","currentPage","json","objekId","params","message","objek","module","exports"],"mappings":"aAAA,IAAIA,QAAUC,QAAQ,WAClBC,OAASF,QAAQG,SADjBH,GAAAA,QAAUC,SAKdC,OAAOE,IAAI,YAAa,SAACC,EAAKC,GAE5BC,GAAGC,MALIP,yBAKO,SAACQ,EAAKC,GAClB,GAAID,EAFFE,OADAC,QAAKC,MAAA,4BAA2BJ,GAC1BH,EAAAQ,OAAA,KAAAC,KAAA,yBAERT,EAAIG,OAAK,iBAAA,CAAAO,aAAAN,QAITJ,OAAGF,IAACa,IAAO,SAAAZ,EAAAC,GAAoBU,IAAAA,EAAcN,EAAAA,MAAAA,UAAAA,KAA7CQ,EAAAC,SAAAd,EAAAG,MAAAU,OAAA,EAIJE,EATE,GASFF,EAAA,GAMMG,EAAmC,SAAlBhB,EAAIG,MAAMc,IAH3BJ,EAAOC,wFACPI,EAAJ,GACIH,EAAc,GAGdI,IACJC,EAAc,8BACdC,EAAID,KAAcE,IAIhBF,GAAAA,MAZEE,qFAYYF,EAAAC,EAAd,SAAAjB,EAAAmB,GACAF,GAAAA,EAOE,OAJJd,QAAAC,MAAA,+BAAAJ,GAIWH,EAAIQ,OAAO,KAAKC,KAAK,qBAF9B,IAEEc,EAFEpB,EAAKmB,EAAA,GAAAE,MACPlB,EAAcmB,KAAAC,KAAAC,EA9BlB,GAkCMA,GACJJ,EAAcK,EAAGT,EAAuBF,sBAExCL,EAAIiB,IAEJN,EAAIR,EAAgBI,EAAA,uCAClBI,GAAAA,OAAcK,EAAdL,CAxCJ,EAwCkBT,KAGfb,GAJDC,MAIOqB,EAAN,GAAAO,OAAMV,EAAN,CA3CH,EA2CSN,IAAA,SAAAX,EAAA4B,GACLR,GAAAA,EAED,OADCM,QAAUtB,MAAA,8BAA2BO,GACtCd,EAAAQ,OAAA,KAAAC,KAAA,sBAIGH,IAAAA,EAAcyB,EAAAC,IAAA,SAAAC,GAAA,OAAAA,EAAAC,KAQZC,EAAW,4HAKXC,EAAiB,GAArB,GAAA,EAAIA,EAAAA,OAAJ,CAGE,IAAMC,EAAeC,EAAWN,IAAI,WAAA,MAAM,MAAKO,KAAK,MADtDJ,GAAIG,uBAAAA,OAAuBD,EAAvBC,MACFF,EAAkBE,EAClBH,GAAW,4BAEZlC,GAAAC,MAAAiC,EAAAC,EAAA,SAAAjC,EAAAqC,GAKC,GAAIrC,EADHD,OAFHiC,QAAW5B,MAAI,4BAAfJ,GAESgC,EAAAA,OAAaC,KAAAA,KAAAA,yBAInBnC,GAEDC,MAAA,yBAAA,SAAAC,EAAAO,GAEE,GAAIP,EADHD,OAECI,QAAQC,MAAM,4BAA6BJ,GAFtCH,EAAAQ,OAAA,KAAAC,KAAA,yBAGLT,EAAAW,OAAOX,QAAW,CACnB+B,UAAAA,EAICS,cAAAA,EAFFxC,WAAAA,EACE+B,YAAAA,EACAS,cAAAA,EACAC,aAAAA,EACAC,eAAAA,cASX9C,OAEDE,IAAA,SAAA,SAAAC,EAAAC,GAWMC,GAAAC,MATK,oIASK,SAACM,EAAAA,GAAmBD,GAAAA,EAC/B,OAD6BD,QAA5BC,MAAA,+BAAAJ,GACDH,EAAAQ,OAAA,KAAAmC,KAAA,CAAApC,MAAA,yBACDP,EAAI2C,KAAKvC,OAMXR,OAAMgD,IAAAA,OAAa,SAACC,EAAAA,GAEpB,IAAMxC,EAAGN,EAAA8C,OAAAX,GAcoCY,GAAAA,MAN3C,mIAMkD,CAAEF,GAAA,SAAAzC,EAAAC,GAAX,GAAvCD,EAJA,OAKDG,QAAAC,MAAA,gCAAAJ,GALQH,EAAIQ,OAAO,KAAKC,KAAK,6BAQPsC,GAAAA,IAAAA,EAAAA,OAAvB,OAAA/C,EAAAQ,OAAA,KAAAG,OAAA,QAAA,CAAAmC,QAAA,0BAIJE,IAAOC,EAAUrD,EAAjB,GAJII,EAAIW,OAAO,SAAU,CAAEoC,MAAAA,QAI3BC,OAAOC,QAAUrD","file":"objek.min.js","sourcesContent":["var express = require('express');\r\nvar router = express.Router();\r\nvar db = require('../db');\r\n\r\n// Route: Tampilkan semua kategori\r\nrouter.get('/kategori', (req, res) => {\r\n  var sql = 'SELECT * FROM kategori';\r\n  db.query(sql, (err, results) => {\r\n    if (err) {\r\n      console.error('Gagal mengambil kategori:', err);\r\n      return res.status(500).send('Gagal memuat kategori');\r\n    }\r\n    res.render('kategori/index', { kategoriList: results });\r\n  });\r\n});\r\n\r\n// Route utama: GET /objek?kategori=buah&page=2\r\nrouter.get('/', (req, res) => {\r\n  var kategoriNama = req.query.kategori || null;\r\n  var page = parseInt(req.query.page) || 1;\r\n  var limit = 6;\r\n  var offset = (page - 1) * limit;\r\n  var tampilkanSemua = req.query.all === 'true';\r\n\r\n  let countSql = 'SELECT COUNT(*) AS total FROM objek o LEFT JOIN kategori k ON o.kategori_id = k.id';\r\n  let dataSql = 'SELECT o.*, k.nama_kategori FROM objek o LEFT JOIN kategori k ON o.kategori_id = k.id';\r\n  let whereClause = '';\r\n  let queryParams = [];\r\n\r\n  if (kategoriNama) {\r\n    whereClause = ' WHERE k.nama_kategori = ? ';\r\n    queryParams.push(kategoriNama);\r\n  }\r\n\r\n  // Query total count untuk pagination\r\n  db.query(countSql + whereClause, queryParams, (err, countResult) => {\r\n    if (err) {\r\n      console.error('Gagal mengambil jumlah data:', err);\r\n      return res.status(500).send('Gagal memuat data');\r\n    }\r\n\r\n    var totalItems = countResult[0].total;\r\n    var totalPages = Math.ceil(totalItems / limit);\r\n    let fullDataSql;\r\n    let dataParams;\r\n\r\n    if (tampilkanSemua) {\r\n      fullDataSql = dataSql + whereClause + ' ORDER BY o.id DESC';\r\n      dataParams = queryParams;\r\n      page = 1; // reset halaman ke 1\r\n    } else {\r\n      fullDataSql = dataSql + whereClause + ' ORDER BY o.id DESC LIMIT ? OFFSET ?';\r\n      dataParams = [...queryParams, limit, offset];\r\n    }\r\n\r\n    db.query(fullDataSql, [...queryParams, limit, offset], (err, objekList) => {\r\n      if (err) {\r\n        console.error('Gagal mengambil data objek:', err);\r\n        return res.status(500).send('Gagal memuat objek');\r\n      }\r\n\r\n      // Ambil daftar ID objek utama untuk dikecualikan dari carousel\r\n      const excludeIds = objekList.map(obj => obj.id);\r\n\r\n      // Bangun query carousel dengan pengecualian\r\n      let carouselSql = `\r\n        SELECT o.*, k.nama_kategori\r\n        FROM objek o\r\n        LEFT JOIN kategori k ON o.kategori_id = k.id\r\n      `;\r\n      let carouselParams = [];\r\n\r\n      if (excludeIds.length > 0) {\r\n        const placeholders = excludeIds.map(() => '?').join(', ');\r\n        carouselSql += ` WHERE o.id NOT IN (${placeholders}) `;\r\n        carouselParams = excludeIds;\r\n      }\r\n\r\n      carouselSql += ' ORDER BY RAND() LIMIT 10';\r\n\r\n      db.query(carouselSql, carouselParams, (err, carouselItems) => {\r\n        if (err) {\r\n          console.error('Gagal mengambil carousel:', err);\r\n          return res.status(500).send('Gagal memuat carousel');\r\n        }\r\n\r\n        // Ambil semua kategori\r\n        db.query('SELECT * FROM kategori', (err, kategoriList) => {\r\n          if (err) {\r\n            console.error('Gagal mengambil kategori:', err);\r\n            return res.status(500).send('Gagal memuat kategori');\r\n          }\r\n\r\n          res.render('objek', {\r\n            objekList,\r\n            carouselItems,\r\n            totalPages,\r\n            currentPage: page,\r\n            kategoriAktif: kategoriNama,\r\n            kategoriList,\r\n            tampilkanSemua\r\n          });\r\n        });\r\n      });\r\n    });\r\n  });\r\n});\r\n\r\n// Route: Data JSON semua objek (untuk AJAX \"Tampilkan Semua\")\r\nrouter.get('/semua', (req, res) => {\r\n  const sql = `\r\n    SELECT o.*, k.nama_kategori\r\n    FROM objek o\r\n    LEFT JOIN kategori k ON o.kategori_id = k.id\r\n    ORDER BY o.id DESC\r\n  `;\r\n  db.query(sql, (err, results) => {\r\n    if (err) {\r\n      console.error('Gagal mengambil semua objek:', err);\r\n      return res.status(500).json({ error: 'Gagal mengambil data' });\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// Route: Detail objek berdasarkan ID\r\nrouter.get('/:id', (req, res) => {\r\n  const objekId = req.params.id;\r\n\r\n  const sql = `\r\n    SELECT o.*, k.nama_kategori \r\n    FROM objek o \r\n    LEFT JOIN kategori k ON o.kategori_id = k.id \r\n    WHERE o.id = ?\r\n  `;\r\n\r\n  db.query(sql, [objekId], (err, results) => {\r\n    if (err) {\r\n      console.error('Gagal mengambil detail objek:', err);\r\n      return res.status(500).send('Gagal memuat detail objek');\r\n    }\r\n\r\n    if (results.length === 0) {\r\n      return res.status(404).render('error', { message: 'Objek tidak ditemukan' });\r\n    }\r\n\r\n    const objek = results[0];\r\n    res.render('detail', { objek });\r\n  });\r\n});\r\n\r\nmodule.exports = router;\r\n"]}